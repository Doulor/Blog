---
import { Icon } from "astro-icon/components";
import { navBarConfig, siteConfig } from "../config";
import { LinkPresets } from "../constants/link-presets";
import { LinkPreset, type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import MobileTOC from "./MobileTOC.svelte";
import Search from "./Search.svelte";
import DisplaySettings from "./widget/DisplaySettings.svelte";
import DropdownMenu from "./widget/DropdownMenu.astro";
import NavMenuPanel from "./widget/NavMenuPanel.astro";
import TranslateButton from "./widget/TranslateButton.svelte";
// 引入Supabase客户端
import { supabase } from '../utils/supabase';

const className = Astro.props.class;

// 获取用户会话状态（判断是否登录）
const { data: { session } } = await supabase.auth.getSession();

// 获取导航栏透明模式配置
const navbarTransparentMode =
	siteConfig.banner?.navbar?.transparentMode || "semi";

// 检查是否为首页
const isHomePage = Astro.url.pathname === "/" || Astro.url.pathname === "";

let links: NavBarLink[] = navBarConfig.links.map(
	(item: NavBarLink | LinkPreset): NavBarLink => {
		if (typeof item === "number") {
			return LinkPresets[item];
		}
		return item;
	},
);
---
<div id="navbar" class="z-50 onload-animation" data-transparent-mode={navbarTransparentMode} data-is-home={isHomePage}>
    <div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition"></div> <!-- used for onload animation -->
    <div class:list={[
        className,
        "!overflow-visible max-w-[var(--page-width)] h-[4.5rem] mx-auto flex items-center justify-between px-4"]}>
        <a href={url('/')} class="btn-plain scale-animation rounded-lg h-[3.25rem] px-5 font-bold active:scale-95">
            <div class="flex flex-row text-[var(--primary)] items-center text-md">
                <Icon name="material-symbols:home-pin-outline" class="text-[1.75rem] mb-1 mr-2" />
                {siteConfig.title}
            </div>
        </a>
        <div class="hidden md:flex items-center space-x-1">
            {links.map((l) => {
                return <DropdownMenu link={l} />;
            })}
        </div>
        <div class="flex items-center gap-1">
            <!-- 搜索按钮 -->
            <Search client:only="svelte"></Search>
            <!-- 移动端目录 -->
            <MobileTOC client:only="svelte"></MobileTOC>
            <!-- 翻译按钮 -->
            <TranslateButton client:only="svelte"></TranslateButton>
            <!-- 显示设置 -->
            {!siteConfig.themeColor.fixed && (
                    <button aria-label="Display Settings" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90" id="display-settings-switch">
                        <Icon name="material-symbols:palette-outline" class="text-[1.25rem]"></Icon>
                    </button>
            )}
            <!-- 管理员登录/欢迎信息 -->
            {session ? (
                <span class="hidden md:inline-flex items-center px-3 py-2 text-sm font-medium text-gray-700 dark:text-gray-200">
                    欢迎, {session.user.email?.split('@')[0]}
                </span>
            ) : (
                <button 
                    onclick="supabase.auth.signInWithOAuth({ provider: 'github' })"
                    class="btn-plain scale-animation rounded-lg h-11 px-3 active:scale-90 text-sm"
                    aria-label="管理员登录"
                >
                    <Icon name="fa6-brands:github" class="text-[1rem] mr-1" />
                    <span class="hidden md:inline">登录</span>
                </button>
            )}
            <!-- 主题切换 -->
            <LightDarkSwitch client:only="svelte"></LightDarkSwitch>
            <!-- 移动端菜单按钮 -->
            <button aria-label="Menu" name="Nav Menu" class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:!hidden" id="nav-menu-switch">
                <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]"></Icon>
            </button>
        </div>
        <NavMenuPanel links={links}></NavMenuPanel>
        <DisplaySettings client:only="svelte"></DisplaySettings>
    </div>
</div>

<script>
// 导入Supabase客户端到全局作用域（供登录按钮使用）
import { supabase } from '../utils/supabase';
window.supabase = supabase;

function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
        switchBtn.onclick = function () {
            switchTheme()
        };
    }

    let settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
        settingBtn.onclick = function () {
            let settingPanel = document.getElementById("display-setting");
            if (settingPanel) {
                settingPanel.classList.toggle("float-panel-closed");
            }
        };
    }

    let menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
        menuBtn.onclick = function () {
            let menuPanel = document.getElementById("nav-menu-panel");
            if (menuPanel) {
                menuPanel.classList.toggle("float-panel-closed");
            }
        };
    }
}

loadButtonScript();

// 为semifull模式添加滚动检测逻辑
function initSemifullScrollDetection() {
    const navbar = document.getElementById('navbar');
    if (!navbar) return;
    
    const transparentMode = navbar.getAttribute('data-transparent-mode');
    if (transparentMode !== 'semifull') return;
    
    const isHomePage = navbar.getAttribute('data-is-home') === 'true';
    
    // 如果不是首页，移除滚动事件监听器并设置为半透明状态
    if (!isHomePage) {
        // 移除之前的滚动事件监听器（如果存在）
        if (window.semifullScrollHandler) {
            window.removeEventListener('scroll', window.semifullScrollHandler);
            window.semifullScrollHandler = null;
        }
        // 设置为半透明状态
        navbar.classList.add('scrolled');
        return;
    }
    
    // 移除现有的scrolled类，重置状态
    navbar.classList.remove('scrolled');
    
    let ticking = false;
    
    function updateNavbarState() {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const threshold = 50; // 滚动阈值，可以根据需要调整
        
        if (scrollTop > threshold) {
            navbar.classList.add('scrolled');
        } else {
            navbar.classList.remove('scrolled');
        }
        
        ticking = false;
    }
    
    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(updateNavbarState);
            ticking = true;
        }
    }
    
    // 移除之前的滚动事件监听器（如果存在）
    if (window.semifullScrollHandler) {
        window.removeEventListener('scroll', window.semifullScrollHandler);
    }
    
    // 保存新的事件处理器引用
    window.semifullScrollHandler = requestTick;
    
    // 监听滚动事件
    window.addEventListener('scroll', requestTick, { passive: true });
    
    // 初始化状态
    updateNavbarState();
}

// 将函数暴露到全局对象，供页面切换时调用
window.initSemifullScrollDetection = initSemifullScrollDetection;

// 页面加载完成后初始化滚动检测
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSemifullScrollDetection);
} else {
    initSemifullScrollDetection();
}
</script>

{import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
async function loadPagefind() {
    try {
        const response = await fetch(scriptUrl, { method: 'HEAD' });
        if (!response.ok) {
            throw new Error(`Pagefind script not found: ${response.status}`);
        }

        const pagefind = await import(scriptUrl);

        await pagefind.options({
            excerptLength: 20
        });

        window.pagefind = pagefind;

        document.dispatchEvent(new CustomEvent('pagefindready'));
        console.log('Pagefind loaded and initialized successfully, event dispatched.');
    } catch (error) {
        console.error('Failed to load Pagefind:', error);
        window.pagefind = {
            search: () => Promise.resolve({ results: [] }),
            options: () => Promise.resolve(),
        };
        document.dispatchEvent(new CustomEvent('pagefindloaderror'));
        console.log('Pagefind load error, event dispatched.');
    }
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadPagefind);
} else {
    loadPagefind();
}
</script>}
