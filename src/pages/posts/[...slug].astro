---
import path from "node:path";
import License from "@components/misc/License.astro";
import Markdown from "@components/misc/Markdown.astro";
import PasswordProtection from "@components/PasswordProtection.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { getSortedPosts } from "@utils/content-utils";
import { getDir, getPostUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import { licenseConfig } from "src/config";
import ImageWrapper from "../../components/misc/ImageWrapper.astro";
import PostMetadata from "../../components/PostMeta.astro";
import { profileConfig, siteConfig } from "../../config";
import { formatDateToYYYYMMDD } from "../../utils/date-utils";
import CryptoJS from "crypto-js";
import bcryptjs from "bcryptjs";
import { createClient } from "@supabase/supabase-js";

// 服务端初始化Supabase
const supabaseServerClient = createClient(
  import.meta.env.PUBLIC_SUPABASE_URL,
  import.meta.env.PUBLIC_SUPABASE_ANON_KEY
);

export async function getStaticPaths() {
  const blogEntries = await getSortedPosts();
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
const { remarkPluginFrontmatter } = await entry.render();

let encryptedContent = "";
let passwordHash = "";
let isEncrypted = entry.data.encrypted && entry.data.password;
if (isEncrypted) {
  const contentToEncrypt = entry.body;
  encryptedContent = CryptoJS.AES.encrypt(contentToEncrypt, entry.data.password).toString();
  const saltRounds = 10;
  passwordHash = bcryptjs.hashSync(entry.data.password, saltRounds);
}

// 获取当前文章ID
const { slug } = Astro.params;
const postId = Array.isArray(slug) ? slug.join("/") : slug;
console.log("服务端生成的postId:", postId);

// 服务端预加载评论（关键修改）
let serverComments = [];
let serverCommentsError = null;
if (!isEncrypted) {
  try {
    console.log("服务端开始预加载评论");
    const { data, error } = await supabaseServerClient
      .from("comments")
      .select("*")
      .eq("post_id", postId)
      .order("created_at", { ascending: false });
    
    if (error) throw error;
    serverComments = data || [];
    console.log(`服务端成功加载${serverComments.length}条评论`);
  } catch (err) {
    console.error("服务端加载评论失败:", err.message);
    serverCommentsError = err.message;
  }
}
---

<meta name="post-id" content={postId} />

<MainGridLayout
  banner={entry.data.image}
  title={entry.data.title}
  description={entry.data.description}
  lang={entry.data.lang}
  setOGTypeArticle={true}
  postSlug={entry.slug}
  headings={headings}
>
  <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
    <div id="post-container" class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full "]}>
      <!-- 文章内容区域保持不变 -->
      <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
        <div class="flex flex-row items-center">
          <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
            <Icon name="material-symbols:notes-rounded" />
          </div>
          <div class="text-sm">{remarkPluginFrontmatter.words} {" " + i18n(I18nKey.wordsCount)}</div>
        </div>
        <div class="flex flex-row items-center">
          <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
            <Icon name="material-symbols:schedule-outline-rounded" />
          </div>
          <div class="text-sm">{remarkPluginFrontmatter.minutes} { " " + i18n(remarkPluginFrontmatter.minutes === 1 ? I18nKey.minuteCount : I18nKey.minutesCount) }</div>
        </div>
      </div>

      <div class="relative onload-animation">
        <div
          data-pagefind-body
          data-pagefind-weight="10"
          data-pagefind-meta="title"
          class="transition w-full block font-bold mb-3 text-3xl md:text-[2.25rem]/[2.75rem] text-black/90 dark:text-white/90 md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)] before:absolute before:top-[0.75rem] before:left-[-1.125rem]"
        >
          {entry.data.title}
        </div>
      </div>

      <div class="onload-animation">
        <PostMetadata
          class="mb-5"
          published={entry.data.published}
          updated={entry.data.updated}
          tags={entry.data.tags}
          category={entry.data.category}
        />
        {!entry.data.image && (
          <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5" />
        )}
      </div>

      {entry.data.image && (
        <ImageWrapper
          id="post-cover"
          src={entry.data.image}
          basePath={path.join("content/posts/", getDir(entry.id))}
          class="mb-8 rounded-xl banner-container onload-animation"
        />
      )}

      {isEncrypted ? (
        <PasswordProtection encryptedContent={encryptedContent} passwordHash={passwordHash} />
      ) : (
        <>
          <Markdown class="mb-6 markdown-content onload-animation"><Content /></Markdown>
          {licenseConfig.enable && (
            <License
              title={entry.data.title}
              slug={entry.slug}
              pubDate={entry.data.published}
              author={entry.data.author}
              sourceLink={entry.data.sourceLink}
              licenseName={entry.data.licenseName}
              licenseUrl={entry.data.licenseUrl}
              class="mb-6 rounded-xl license-container onload-animation"
            />
          )}

          <!-- 评论区 -->
          <div class="mt-10 border-t border-[var(--line-divider)] pt-8">
            <h3 class="text-xl font-bold mb-6 flex items-center">
              <Icon name="material-symbols:comment-outline" class="mr-2 text-[var(--primary)]" />
              发表评论
            </h3>
            <div class="space-y-4 mb-8">
              <input
                type="text"
                id="nickname"
                placeholder="请输入昵称"
                class="w-full p-3 border border-[var(--line-divider)] rounded-lg"
              />
              <textarea
                id="content"
                placeholder="请输入评论内容"
                class="w-full p-3 border border-[var(--line-divider)] rounded-lg"
                rows="5"
              ></textarea>
              <button
                id="submitCommentBtn"
                onclick="submitComment()"
                class="px-6 py-3 bg-[var(--primary)] text-white rounded-lg transition-all duration-300"
              >
                <Icon name="material-symbols:send-outline" class="mr-2" />
                提交评论
              </button>
            </div>

            <!-- 评论列表（服务端预渲染） -->
            <div>
              <h3 class="text-xl font-bold mb-4">评论列表</h3>
              <div id="commentsList" class="space-y-6">
                {serverCommentsError ? (
                  <!-- 服务端加载失败时显示 -->
                  <div class="text-center py-6 text-amber-500">
                    <Icon name="material-symbols:warning" class="mx-auto h-6 w-6 mb-2" />
                    评论加载有问题，点击刷新
                    <button onclick="fetchComments()" class="mt-2 px-4 py-2 bg-[var(--primary)] text-white rounded-md">
                      刷新评论
                    </button>
                  </div>
                ) : serverComments.length === 0 ? (
                  <!-- 无评论时显示 -->
                  <div class="text-center py-6 text-gray-500">
                    <Icon name="material-symbols:comment-outline" class="mx-auto h-8 w-8 mb-2 opacity-50" />
                    暂无评论，快来抢沙发～
                  </div>
                ) : (
                  <!-- 服务端预渲染的评论 -->
                  {serverComments.map(comment => (
                    <div class="p-4 border rounded-lg bg-gray-50 dark:bg-gray-800/50">
                      <div class="flex justify-between items-center mb-2">
                        <span class="font-bold">{comment.nickname}</span>
                        <span class="text-sm text-gray-500">{new Date(comment.created_at).toLocaleString()}</span>
                      </div>
                      <div>{comment.content}</div>
                    </div>
                  ))}
                )}
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  </div>

  <!-- 上下篇导航 -->
  <div class="flex flex-col md:flex-row justify-between mb-4 gap-4 overflow-hidden w-full">
    <a
      href={entry.data.nextSlug ? getPostUrlBySlug(entry.data.nextSlug) : "#"}
      class:list={["w-full font-bold overflow-hidden active:scale-95", { "pointer-events-none": !entry.data.nextSlug }]}
    >
      {entry.data.nextSlug && (
        <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-start gap-4">
          <Icon name="material-symbols:chevron-left-rounded" class="text-[2rem] text-[var(--primary)]" />
          <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
            {entry.data.nextTitle}
          </div>
        </div>
      )}
    </a>
    <a
      href={entry.data.prevSlug ? getPostUrlBySlug(entry.data.prevSlug) : "#"}
      class:list={["w-full font-bold overflow-hidden active:scale-95", { "pointer-events-none": !entry.data.prevSlug }]}
    >
      {entry.data.prevSlug && (
        <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-end gap-4">
          <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
            {entry.data.prevTitle}
          </div>
          <Icon name="material-symbols:chevron-right-rounded" class="text-[2rem] text-[var(--primary)]" />
        </div>
      )}
    </a>
  </div>
</MainGridLayout>

<script>
  // 客户端仅处理提交和刷新逻辑
  import { createClient } from "@supabase/supabase-js";

  // 初始化客户端Supabase
  const supabaseClient = createClient(
    import.meta.env.PUBLIC_SUPABASE_URL,
    import.meta.env.PUBLIC_SUPABASE_ANON_KEY
  );
  const postId = document.querySelector('meta[name="post-id"]').content;

  // 客户端刷新评论
  window.fetchComments = async () => {
    const commentsList = document.getElementById("commentsList");
    if (!commentsList) return;

    // 显示加载状态
    commentsList.innerHTML = `
      <div class="text-center py-6 text-gray-500">
        <Icon name="material-symbols:comment-outline" class="mx-auto h-8 w-8 mb-2 opacity-50 animate-pulse" />
        加载评论中...
      </div>
    `;

    try {
      const { data, error } = await supabaseClient
        .from("comments")
        .select("*")
        .eq("post_id", postId)
        .order("created_at", { ascending: false });

      if (error) throw error;

      // 渲染评论
      if (!data || data.length === 0) {
        commentsList.innerHTML = `
          <div class="text-center py-6 text-gray-500">
            暂无评论，快来抢沙发～
          </div>
        `;
      } else {
        commentsList.innerHTML = data.map(comment => `
          <div class="p-4 border rounded-lg bg-gray-50 dark:bg-gray-800/50 animate-fadeIn">
            <div class="flex justify-between items-center mb-2">
              <span class="font-bold">${comment.nickname}</span>
              <span class="text-sm text-gray-500">${new Date(comment.created_at).toLocaleString()}</span>
            </div>
            <div>${comment.content}</div>
          </div>
        `).join("");
      }
    } catch (err) {
      commentsList.innerHTML = `
        <div class="text-center py-6 text-red-500">
          <Icon name="material-symbols:error" class="mx-auto h-6 w-6 mb-2" />
          加载失败: ${err.message}
          <button onclick="fetchComments()" class="mt-2 px-4 py-2 bg-[var(--primary)] text-white rounded-md">
            重试
          </button>
        </div>
      `;
    }
  };

  // 提交评论函数
  window.submitComment = async () => {
    const nickname = document.getElementById("nickname").value.trim();
    const content = document.getElementById("content").value.trim();
    const submitBtn = document.getElementById("submitCommentBtn");
    
    if (!nickname) {
      alert("请输入昵称");
      return;
    }
    if (!content) {
      alert("请输入评论内容");
      return;
    }

    // 保存原始按钮状态
    const originalHTML = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<Icon name="material-symbols:circle" class="mr-2 animate-spin" /> 提交中...';

    try {
      // 提交评论
      const { error } = await supabaseClient
        .from("comments")
        .insert([{ 
          post_id: postId, 
          nickname: nickname, 
          content: content,
          created_at: new Date().toISOString()
        }]);

      if (error) throw error;
      
      // 提交成功反馈
      submitBtn.innerHTML = '<Icon name="material-symbols:check" class="mr-2" /> 提交成功';
      submitBtn.classList.add("bg-green-500");
      
      // 清空输入框并刷新评论
      document.getElementById("nickname").value = "";
      document.getElementById("content").value = "";
      
      // 延迟刷新，确保数据已写入
      setTimeout(() => {
        window.fetchComments();
      }, 500);

    } catch (err) {
      alert("提交失败：" + err.message);
    } finally {
      // 恢复按钮状态
      setTimeout(() => {
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalHTML;
        submitBtn.classList.remove("bg-green-500");
      }, 1500);
    }
  };
</script>
